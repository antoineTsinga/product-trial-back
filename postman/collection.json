{
	"info": {
		"_postman_id": "ec66b794-df37-4589-87ea-01c7334242c5",
		"name": "Product API Tests",
		"description": "This collection contains tests for the Product Management API, covering CRUD operations and filtering and sorting functionalities.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16571875"
	},
	"item": [
		{
			"name": "Valid requests",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('results');\r",
									"    pm.expect(jsonData.results).to.be.an('array');\r",
									"    pm.expect(jsonData).to.have.property('total_pages');\r",
									"    pm.expect(jsonData).to.have.property('total_results');\r",
									"    pm.expect(jsonData).to.have.property('size');\r",
									"    pm.expect(jsonData).to.have.property('page');\r",
									"});\r",
									"\r",
									"pm.test(\"Products have correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.results.length > 0) {\r",
									"        pm.expect(jsonData.results[0]).to.have.property('id');\r",
									"        pm.expect(jsonData.results[0]).to.have.property('code');\r",
									"        pm.expect(jsonData.results[0]).to.have.property('name');\r",
									"        pm.expect(jsonData.results[0]).to.have.property('price');\r",
									"        pm.expect(jsonData.results[0]).to.have.property('category');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							]
						},
						"description": "Retrieves a paginated list of products without filters."
					},
					"response": []
				},
				{
					"name": "Get Products with Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Filtered products match criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.results.forEach(function (product) {\r",
									"        pm.expect(product.name.toLowerCase()).to.contains('black');\r",
									"        pm.expect(product.price).to.equal(72);\r",
									"        pm.expect(product.category).to.equal('Accessories');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products?name_contains=black&price_equals=72&category_equals=Accessories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							],
							"query": [
								{
									"key": "name_contains",
									"value": "black"
								},
								{
									"key": "price_equals",
									"value": "72"
								},
								{
									"key": "category_equals",
									"value": "Accessories"
								}
							]
						},
						"description": "Retrieves a filtered list of products."
					},
					"response": []
				},
				{
					"name": "Get Products with Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Products are sorted by price in descending order\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var prices = jsonData.results.map(product => product.price);\r",
									"    var sortedPrices = [...prices].sort((a, b) => b - a);\r",
									"    pm.expect(prices).to.eql(sortedPrices);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products?sort=price,desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "price,desc"
								}
							]
						},
						"description": "Retrieves a list of products sorted by price in descending order."
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Product has all required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('image');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData).to.have.property('inventoryStatus');\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"5"
							]
						},
						"description": "Retrieves a specific product by its ID."
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Product is created with correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(jsonData.code).to.equal(requestBody.code);\r",
									"    pm.expect(jsonData.name).to.equal(requestBody.name);\r",
									"    pm.expect(jsonData.description).to.equal(requestBody.description);\r",
									"    pm.expect(jsonData.image).to.equal(requestBody.image);\r",
									"    pm.expect(jsonData.price).to.equal(requestBody.price);\r",
									"    pm.expect(jsonData.category).to.equal(requestBody.category);\r",
									"    pm.expect(jsonData.quantity).to.equal(requestBody.quantity);\r",
									"    pm.expect(jsonData.inventoryStatus).to.equal(requestBody.inventoryStatus);\r",
									"    pm.expect(jsonData.rating).to.equal(requestBody.rating);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes product ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"PROD001\",\r\n  \"name\": \"New Product\",\r\n  \"description\": \"A new product description\",\r\n  \"image\": \"image_url.jpg\",\r\n  \"price\": 99.99,\r\n  \"category\": \"Electronics\",\r\n  \"quantity\": 50,\r\n  \"inventoryStatus\": \"INSTOCK\",\r\n  \"rating\": 4.5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							]
						},
						"description": "Creates a new product."
					},
					"response": []
				},
				{
					"name": "Update Product (Full Update)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product is updated with correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(jsonData.id).to.equal(5);\r",
									"    pm.expect(jsonData.code).to.equal(requestBody.code);\r",
									"    pm.expect(jsonData.name).to.equal(requestBody.name);\r",
									"    pm.expect(jsonData.description).to.equal(requestBody.description);\r",
									"    pm.expect(jsonData.image).to.equal(requestBody.image);\r",
									"    pm.expect(jsonData.price).to.equal(requestBody.price);\r",
									"    pm.expect(jsonData.category).to.equal(requestBody.category);\r",
									"    pm.expect(jsonData.quantity).to.equal(requestBody.quantity);\r",
									"    pm.expect(jsonData.inventoryStatus).to.equal(requestBody.inventoryStatus);\r",
									"    pm.expect(jsonData.rating).to.equal(requestBody.rating);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"PROD002\",\r\n  \"name\": \"New Product\",\r\n  \"description\": \"A new product description\",\r\n  \"image\": \"image_url.jpg\",\r\n  \"price\": 99.99,\r\n  \"category\": \"Electronics\",\r\n  \"quantity\": 50,\r\n  \"inventoryStatus\": \"INSTOCK\",\r\n  \"rating\": 4.5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"5"
							]
						},
						"description": "Updates all fields of an existing product."
					},
					"response": []
				},
				{
					"name": "Partial Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product is partially updated with correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(jsonData.id).to.equal(5);\r",
									"    pm.expect(jsonData.price).to.equal(requestBody.price);\r",
									"    pm.expect(jsonData.quantity).to.equal(requestBody.quantity);\r",
									"});\r",
									"\r",
									"pm.test(\"Other fields remain unchanged\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('image');\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData).to.have.property('inventoryStatus');\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": 89.99,\r\n  \"quantity\": 45\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"5"
							]
						},
						"description": "Partially updates an existing product."
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Send a GET request to verify the product no longer exists\r",
									"pm.sendRequest({\r",
									"    url: `${pm.variables.get('base_url')}/api/${pm.variables.get('api_version')}/products/1`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Product no longer exists\", function () {\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"1"
							]
						},
						"description": "Deletes a specific product."
					},
					"response": []
				},
				{
					"name": "Delete Multiple Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Send GET requests to verify the products no longer exist\r",
									"var deletedIds = [2, 3, 4];  // adjust based on your actual request\r",
									"deletedIds.forEach(function(id) {\r",
									"    pm.sendRequest({\r",
									"        url: `${pm.variables.get('base_url')}/api/${pm.variables.get('api_version')}/products/${id}`,\r",
									"        method: 'GET'\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"Product \" + id + \" no longer exists\", function () {\r",
									"            pm.expect(res).to.have.property('code', 404);\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/delete?ids=2,3,4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"delete"
							],
							"query": [
								{
									"key": "ids",
									"value": "2,3,4"
								}
							]
						},
						"description": "Deletes multiple products in a single request."
					},
					"response": []
				},
				{
					"name": "Reset database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Database has been reset\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/admin/reset?code={{admin_code}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"admin",
								"reset"
							],
							"query": [
								{
									"key": "code",
									"value": "{{admin_code}}"
								}
							]
						},
						"description": "Admin request to reset database (usefull for testing)"
					},
					"response": []
				}
			],
			"description": "For each test we :\n\n1. Verify the response status code.\n    \n2. Check the structure and content of the JSON response.\n    \n3. For creation and update operations, verify that the returned data matches the sent data.\n    \n4. For deletion operations, verify that the product no longer exists after deletion."
		},
		{
			"name": "Invalid requests",
			"item": [
				{
					"name": "Get Non-existent Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Product with id 999999 not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"999999"
							]
						},
						"description": "Test for NoSuchElementException (Not Found)"
					},
					"response": []
				},
				{
					"name": "Get Products with Invalid Page Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Page index must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products?page=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								}
							]
						},
						"description": "Test for BusinessException (Invalid Page Number)"
					},
					"response": []
				},
				{
					"name": "Update Non-existent Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates product not found\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Product with id 999999 not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Updated Product\",\r\n    \"price\": 99.99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"999999"
							]
						},
						"description": "Test for Invalid Product Update"
					},
					"response": []
				},
				{
					"name": "Create Product with Duplicate Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates duplicate product code\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Product with code vbb124btr already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"vbb124btr\",\r\n    \"name\": \"New Product\",\r\n    \"price\": 99.99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							]
						},
						"description": "Test for Invalid Product Creation with existing code"
					},
					"response": []
				},
				{
					"name": "Get Products with Invalid Sort Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid sort parameter\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Invalid sort parameter: invalidField\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products?sort=invalidField,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "invalidField,asc"
								}
							]
						},
						"description": "Test for Invalid Sort Parameter"
					},
					"response": []
				},
				{
					"name": "Reset with wrong admin code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid code returns 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains unauthorized message\", function(){\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"Invalid admin code\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/products/admin/reset?code=WRONG_CODE",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"products",
								"admin",
								"reset"
							],
							"query": [
								{
									"key": "code",
									"value": "WRONG_CODE"
								}
							]
						},
						"description": "Test for wrong admin code"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const base_url = pm.variables.get('base_url');\r",
					"const api_version = pm.variables.get('api_version');\r",
					"const admin_code = pm.variables.get('admin_code');\r",
					"pm.sendRequest({\r",
					"    url: pm.variables.get('base_url') + '/actuator/health',\r",
					"    method: 'GET'\r",
					"}, function (err, res) {\r",
					"    if (err || res.code !== 200) {\r",
					"        console.error(\"Application is not ready. Please start the Spring Boot application.\");\r",
					"         pm.execution.setNextRequest(null)\r",
					"        \r",
					"    }\r",
					"});\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${base_url}/api/${api_version}/products/admin/reset?code=${admin_code}`,\r",
					"    method: 'POST'\r",
					"}, function (err, res) {\r",
					"    if (err || res.code !== 200) {\r",
					"        console.error(\"Fail to reset product table\");\r",
					"\r",
					"          pm.execution.setNextRequest(null)\r",
					"    }\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}